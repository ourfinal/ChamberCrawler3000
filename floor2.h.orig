#ifndef _D_FLOOR_H_
#define _D_FLOOR_H_
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include "type.h"
#include "object.h"
#include "chamber.h"
#include "player.h"
class Dragon;
class Window;
class Panel;
class Player;
class Enemy;
class Display;

class D_Floor{
	std::vector<std::vector<std::shared_ptr<Object>>> board; //the board
	std::shared_ptr<Player> thePlayer;
//	std::shared_ptr theStair;
	std::vector<std::shared_ptr<Dragon>> theDragon;
	std::vector<std::shared_ptr<Enemy>> theEnemy;
//	std::vector<std::shared_ptrTreasure> D_Hoard;
	std::vector<Chamber> theChamber; //store the chamber
//	std::shared_ptr<Object> tmp;
 //   std::shared_ptr<Window> w; //display.
 //   std::shared_ptr<Panel> p; //planar.
	Display& theDisplay;
	int height;
	int width;
	bool stop;
	bool enemyMove(int n, std::vector<bool>& possibility);
//	int getRandom(int min, int max);
	public:	
	D_Floor(Display& display);
	void floorVisit(std::string s, Type type);
	void clearFloor(bool cleanPlayer);
	//~D_Floor();
	
	///void floor_move();
	///void floor_attack();
    void init(std::string file = "plainfloor.txt"); // set up the board according to the given floor in the file.
    void setChamber(int r, int c, std::vector<std::shared_ptr<Object>*>& arr);
	void spawnAction();
	void selectPlayer();
	void setPlayer(); // generate player.
	void setStair(); //generate stairway.
	void setPotion(); //generate potion
	void setTreasure(); //generate gold.
	void setEnemy(); //generate enemy.
<<<<<<< HEAD
    
=======
>>>>>>> f321a6e73b44f7395fd98ea93fa814002967c671
	void windowPreprocessor(std::string message, int r, int c);
   	void setNewEnemy(); // new enemy 
	void pause();
	std::string outPut();
	
	friend std::ostream &operator<<(std::ostream &out, const D_Floor &f);
};

#endif
